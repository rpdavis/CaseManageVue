import{c as V,d as k,g as A,a as R,s as Y,b as q,_ as z,u as G,r as I,o as H,e as y,f as s,h as N,i as w,t as i,j as l,F as K,k as Q,l as U,S as W,m as E,n as F,p as b}from"./index-CFGzGMXw.js";async function X(){var _;console.log("Starting student ID migration...");try{const n=V(k,"students"),p=await A(n);console.log(`Found ${p.size} students to migrate`);let f=0,u=0;for(const m of p.docs){const d=m.data(),r=m.id;if(!/^\d+$/.test(r)){console.log(`Student ${r} already uses auto-generated ID, skipping`);continue}const v=r;try{const a=R(V(k,"students")),h={...d,app:{...d.app,studentData:{...(_=d.app)==null?void 0:_.studentData,ssid:v}},migratedFrom:r,migratedAt:new Date().toISOString()};await Y(a,h),await q(R(k,"students",r)),console.log(`✅ Migrated student ${r} → ${a.id}`),f++}catch(a){console.error(`❌ Failed to migrate student ${r}:`,a),u++}}return console.log(`Migration complete: ${f} migrated, ${u} errors`),{migratedCount:f,errorCount:u}}catch(n){throw console.error("Migration failed:",n),n}}async function Z(){var _,n;console.log("Verifying migration...");try{const p=V(k,"students"),f=await A(p);let u=0,m=0;for(const d of f.docs){const r=d.data(),v=d.id,a=(n=(_=r.app)==null?void 0:_.studentData)==null?void 0:n.ssid;a?(console.log(`✅ Student ${v} has SSID: ${a}`),u++):(console.warn(`⚠️ Student ${v} missing SSID in app data`),m++)}return console.log(`Verification complete: ${u} verified, ${m} issues`),{verifiedCount:u,issuesCount:m}}catch(p){throw console.error("Verification failed:",p),p}}const ss={class:"testing-view"},ts={class:"test-section"},es={class:"status-grid"},ns={class:"status-item"},os={class:"status-item"},is={class:"status-item"},as={key:0,class:"test-section"},ls={class:"settings-display"},rs={class:"setting-group"},ds={class:"setting-values"},us={class:"setting-group"},cs={class:"setting-values"},gs={class:"setting-group"},ps={class:"setting-values"},vs={class:"setting-group"},ms={class:"setting-values"},Ss={class:"test-section"},fs={class:"action-buttons"},ys=["disabled"],bs=["disabled"],_s={class:"test-section"},hs={class:"integration-test"},Ds={key:0,class:"test-form-container"},Is={class:"test-section"},ws={class:"migration-controls"},Ts=["disabled"],Ms=["disabled"],Ns={key:0,class:"migration-result"},ks={class:"test-section"},Vs={class:"ssid-test-controls"},$s=["disabled"],Cs={key:0,class:"ssid-test-result"},Rs={__name:"TestingView",setup(_){const{appSettings:n,loadAppSettings:p,resetAppSettings:f,loading:u,error:m}=G(),d=I(!1),r=I(!1),v=I(!1),a=I(null),h=I(!1),D=I(null);H(async()=>{console.log("TestingView: Component mounted, checking app settings...")});const L=async()=>{try{await p(),console.log("TestingView: Settings reloaded successfully")}catch(e){console.error("TestingView: Error reloading settings:",e)}},j=async()=>{try{await f(),console.log("TestingView: Settings reset successfully")}catch(e){console.error("TestingView: Error resetting settings:",e)}},x=e=>{console.log("TestingView: Test student saved:",e),d.value=!1},P=async()=>{r.value=!0,a.value=null;try{const e=await X();a.value=e,console.log("Migration completed:",e)}catch(e){a.value={error:e.message},console.error("Migration failed:",e)}finally{r.value=!1}},O=async()=>{v.value=!0,a.value=null;try{const e=await Z();a.value=e,console.log("Verification completed:",e)}catch(e){a.value={error:e.message},console.error("Verification failed:",e)}finally{v.value=!1}},B=async()=>{h.value=!0,D.value=null;try{const e=[{sourcedId:"123456789",givenName:"John",familyName:"Doe",specialEducation:"true"},{SSID:"987654321",FirstName:"Jane",LastName:"Smith",IEP:"Yes"},{ssid:"555666777",FirstName:"Bob",LastName:"Johnson",iep:"1"},{StateStudentID:"111222333",FirstName:"Alice",LastName:"Brown",504:"true"}],t={aeriesMapping:{},seisMapping:{},ssidExtraction:{},fieldMapping:{}};e.forEach((o,S)=>{const c={};Object.keys(o).forEach(g=>{c[g]=E(g)}),t.aeriesMapping[`row_${S}`]=c}),e.forEach((o,S)=>{const c={};Object.keys(o).forEach(g=>{c[g]=F(g)}),t.seisMapping[`row_${S}`]=c}),e.forEach((o,S)=>{var g;const c=(g=o.sourcedId||o.SSID||o.ssid||o.StateStudentID||o.stateStudentId)==null?void 0:g.trim();t.ssidExtraction[`row_${S}`]={original:o,extractedSSID:c,success:!!c}});const T=["specialEducation","iep","IEP","plan504","504","disabilities","accommodations"];t.fieldMapping={aeries:T.map(o=>({field:o,mapped:E(o)})),seis:T.map(o=>({field:o,mapped:F(o)}))},D.value={success:!0,message:"SSID resolution test completed successfully",results:t},console.log("SSID resolution test completed:",t)}catch(e){D.value={success:!1,error:e.message,message:"SSID resolution test failed"},console.error("SSID resolution test failed:",e)}finally{h.value=!1}},J=()=>{D.value=null};return(e,t)=>{var T,o,S,c,g,$;return b(),y("div",ss,[t[18]||(t[18]=s("h2",null,"App Settings Testing",-1)),s("div",ts,[t[5]||(t[5]=s("h3",null,"App Settings Status",-1)),s("div",es,[s("div",ns,[t[2]||(t[2]=s("strong",null,"Loading:",-1)),w(" "+i(l(u)?"Yes":"No"),1)]),s("div",os,[t[3]||(t[3]=s("strong",null,"Error:",-1)),w(" "+i(l(m)||"None"),1)]),s("div",is,[t[4]||(t[4]=s("strong",null,"Loaded:",-1)),w(" "+i(l(n)&&Object.keys(l(n)).length>0?"Yes":"No"),1)])])]),l(n)?(b(),y("div",as,[t[10]||(t[10]=s("h3",null,"Current Settings",-1)),s("div",ls,[s("div",rs,[s("h4",null,"Grades ("+i(((T=l(n).grades)==null?void 0:T.length)||0)+")",1),s("div",ds,i(((o=l(n).grades)==null?void 0:o.join(", "))||"None configured"),1)]),s("div",us,[s("h4",null,"Class Services ("+i(((S=l(n).classServices)==null?void 0:S.length)||0)+")",1),s("div",cs,[(b(!0),y(K,null,Q(l(n).classServices,M=>{var C;return b(),y("div",{key:M.name,class:"service-item"},[s("strong",null,i(M.name)+":",1),w(" "+i(((C=M.enabledSubcategories)==null?void 0:C.join(", "))||"None enabled"),1)])}),128))])]),s("div",gs,[s("h4",null,"Service Providers ("+i(((c=l(n).serviceProviders)==null?void 0:c.length)||0)+")",1),s("div",ps,i(((g=l(n).serviceProviders)==null?void 0:g.join(", "))||"None configured"),1)]),s("div",vs,[t[9]||(t[9]=s("h4",null,"Periods",-1)),s("div",ms,[t[6]||(t[6]=s("strong",null,"Number:",-1)),w(" "+i(l(n).numPeriods||0),1),t[7]||(t[7]=s("br",null,null,-1)),t[8]||(t[8]=s("strong",null,"Labels:",-1)),w(" "+i((($=l(n).periodLabels)==null?void 0:$.join(", "))||"None"),1)])])])])):N("",!0),s("div",Ss,[t[11]||(t[11]=s("h3",null,"Test Actions",-1)),s("div",fs,[s("button",{onClick:L,disabled:l(u),class:"btn btn-primary"},i(l(u)?"Loading...":"Reload Settings"),9,ys),s("button",{onClick:j,disabled:l(u),class:"btn btn-secondary"}," Reset to Defaults ",8,bs)])]),s("div",_s,[t[13]||(t[13]=s("h3",null,"Component Integration Test",-1)),s("div",hs,[t[12]||(t[12]=s("p",null,"This section tests if the StudentForm can access app settings:",-1)),s("button",{onClick:t[0]||(t[0]=M=>d.value=!d.value),class:"btn btn-primary"},i(d.value?"Hide":"Show")+" Test Student Form ",1),d.value?(b(),y("div",Ds,[U(W,{users:{userRoles:{}},mode:"new",onClose:t[1]||(t[1]=M=>d.value=!1),onSaved:x})])):N("",!0)])]),s("div",Is,[t[15]||(t[15]=s("h3",null,"Migration Tools",-1)),s("div",ws,[s("button",{onClick:P,disabled:r.value,class:"btn btn-warning"},i(r.value?"Migrating...":"Migrate Student IDs"),9,Ts),s("button",{onClick:O,disabled:v.value,class:"btn btn-secondary"},i(v.value?"Verifying...":"Verify Migration"),9,Ms)]),a.value?(b(),y("div",Ns,[t[14]||(t[14]=s("h4",null,"Migration Result:",-1)),s("pre",null,i(JSON.stringify(a.value,null,2)),1)])):N("",!0)]),s("div",ks,[t[17]||(t[17]=s("h3",null,"SSID Resolution Test",-1)),s("div",Vs,[s("button",{onClick:B,disabled:h.value,class:"btn btn-primary"},i(h.value?"Testing...":"Test SSID Resolution"),9,$s),s("button",{onClick:J,class:"btn btn-secondary"}," Clear Results ")]),D.value?(b(),y("div",Cs,[t[16]||(t[16]=s("h4",null,"SSID Resolution Test Result:",-1)),s("pre",null,i(JSON.stringify(D.value,null,2)),1)])):N("",!0)])])}}},Fs=z(Rs,[["__scopeId","data-v-15acca55"]]);export{Fs as default};
