import{c as L,d as T,g as j,a as A,s as H,b as Q,u as O,e as W,_ as X,f as Z,r as M,o as ee,h as N,i as e,j as F,k as C,t as a,l as m,F as se,m as te,n as oe,S as ne,p as J,q,v as I}from"./index-WYrjhvco.js";async function ie(){var _;console.log("Starting student ID migration...");try{const o=L(T,"students"),l=await j(o);console.log(`Found ${l.size} students to migrate`);let p=0,u=0;for(const f of l.docs){const S=f.data(),n=f.id;if(!/^\d+$/.test(n)){console.log(`Student ${n} already uses auto-generated ID, skipping`);continue}const r=n;try{const v=A(L(T,"students")),i={...S,app:{...S.app,studentData:{...(_=S.app)==null?void 0:_.studentData,ssid:r}},migratedFrom:n,migratedAt:new Date().toISOString()};await H(v,i),await Q(A(T,"students",n)),console.log(`✅ Migrated student ${n} → ${v.id}`),p++}catch(v){console.error(`❌ Failed to migrate student ${n}:`,v),u++}}return console.log(`Migration complete: ${p} migrated, ${u} errors`),{migratedCount:p,errorCount:u}}catch(o){throw console.error("Migration failed:",o),o}}async function re(){var _,o;console.log("Verifying migration...");try{const l=L(T,"students"),p=await j(l);let u=0,f=0;for(const S of p.docs){const n=S.data(),r=S.id,v=(o=(_=n.app)==null?void 0:_.studentData)==null?void 0:o.ssid;v?(console.log(`✅ Student ${r} has SSID: ${v}`),u++):(console.warn(`⚠️ Student ${r} missing SSID in app data`),f++)}return console.log(`Verification complete: ${u} verified, ${f} issues`),{verifiedCount:u,issuesCount:f}}catch(l){throw console.error("Verification failed:",l),l}}async function ae(){var u,f,S,n;console.log("🔄 Starting period label migration...");const{getNumber:_}=O();let o=0,l=0,p=[];try{const r=L(T,"students"),v=await j(r);o=v.size,console.log(`📊 Found ${o} students to check`);for(const i of v.docs)try{const d=i.data();let y=!1,g={};const b=((f=(u=d.app)==null?void 0:u.schedule)==null?void 0:f.periods)||d.schedule||{};if(Object.entries(b).forEach(([h,R])=>{if(isNaN(parseInt(h))){const P=_(h);if(P)g[P]=R,y=!0,console.log(`🔧 Converting "${h}" → ${P} for student ${i.id}`);else{const E=h.match(/^(?:period|per)(\d+)$/i);E?(g[parseInt(E[1])]=R,y=!0,console.log(`🔧 Converting "${h}" → ${E[1]} for student ${i.id}`)):(console.warn(`⚠️ Could not convert period key "${h}" for student ${i.id}`),g[h]=R)}}else g[h]=R}),y){const h={};(n=(S=d.app)==null?void 0:S.schedule)!=null&&n.periods?h["app.schedule.periods"]=g:d.schedule&&(h.schedule=g),Object.keys(h).length>0&&(await W(A(T,"students",i.id),h),l++,console.log(`✅ Updated student ${i.id}`))}}catch(d){console.error(`❌ Error processing student ${i.id}:`,d),p.push({studentId:i.id,error:d.message})}return console.log("🎉 Migration completed!"),console.log("📈 Results:"),console.log(`   - Total students checked: ${o}`),console.log(`   - Students migrated: ${l}`),console.log(`   - Errors: ${p.length}`),p.length>0&&(console.warn("⚠️ Errors encountered:"),p.forEach(({studentId:i,error:d})=>{console.warn(`   - ${i}: ${d}`)})),{success:!0,totalStudents:o,migratedStudents:l,errors:p}}catch(r){return console.error("💥 Migration failed:",r),{success:!1,error:r.message,totalStudents:o,migratedStudents:l,errors:p}}}async function le(){var p,u;console.log("👀 Starting migration preview...");const{getNumber:_}=O();let o=0,l=[];try{const f=L(T,"students"),S=await j(f);o=S.size;for(const n of S.docs){const r=n.data(),v=((u=(p=r.app)==null?void 0:p.schedule)==null?void 0:u.periods)||r.schedule||{};let i=[];Object.keys(v).forEach(d=>{if(isNaN(parseInt(d))){const y=_(d);if(y)i.push({from:d,to:y});else{const g=d.match(/^(?:period|per)(\d+)$/i);g&&i.push({from:d,to:parseInt(g[1])})}}}),i.length>0&&l.push({id:n.id,name:`${r.firstName||""} ${r.lastName||""}`.trim(),changes:i})}return console.log("📋 Migration Preview Results:"),console.log(`   - Total students: ${o}`),console.log(`   - Students needing migration: ${l.length}`),l.length>0&&(console.log("   - Changes needed:"),l.forEach(n=>{console.log(`     📝 ${n.name} (${n.id}):`),n.changes.forEach(r=>{console.log(`        "${r.from}" → ${r.to}`)})})),{totalStudents:o,studentsNeedingMigration:l,changesNeeded:l.length>0}}catch(f){return console.error("💥 Preview failed:",f),{error:f.message,totalStudents:0,studentsNeedingMigration:[],changesNeeded:!1}}}const de={class:"testing-view"},ce={class:"test-section"},ue={class:"status-grid"},ge={class:"status-item"},pe={class:"status-item"},ve={class:"status-item"},fe={key:0,class:"test-section"},me={class:"settings-display"},he={class:"setting-group"},Se={class:"setting-values"},be={class:"setting-group"},ye={class:"setting-values"},$e={class:"setting-group"},we={class:"setting-values"},_e={class:"setting-group"},De={class:"setting-values"},Me={class:"test-section"},Ne={class:"action-buttons"},Ie=["disabled"],Te=["disabled"],Re={class:"test-section"},Ce={class:"integration-test"},Pe={key:0,class:"test-form-container"},Ee={class:"test-section"},ke={class:"migration-controls"},Ve=["disabled"],Fe=["disabled"],Le={key:0,class:"migration-result"},je={class:"test-section"},Ae={class:"period-migration-controls"},Oe=["disabled"],xe=["disabled"],Be={key:0,class:"migration-result"},Je={class:"test-section"},qe={class:"ssid-test-controls"},ze=["disabled"],Ye={key:0,class:"ssid-test-result"},Ke={__name:"TestingView",setup(_){const{appSettings:o,loadAppSettings:l,resetAppSettings:p,loading:u,error:f}=Z(),{labels:S}=O(),n=M(!1),r=M(!1),v=M(!1),i=M(null),d=M(!1),y=M(null),g=M(!1),b=M(null);ee(async()=>{console.log("TestingView: Component mounted, checking app settings...")});const h=async()=>{try{await l(),console.log("TestingView: Settings reloaded successfully")}catch(t){console.error("TestingView: Error reloading settings:",t)}},R=async()=>{try{await p(),console.log("TestingView: Settings reset successfully")}catch(t){console.error("TestingView: Error resetting settings:",t)}},P=t=>{console.log("TestingView: Test student saved:",t),n.value=!1},E=async()=>{r.value=!0,i.value=null;try{const t=await ie();i.value=t,console.log("Migration completed:",t)}catch(t){i.value={error:t.message},console.error("Migration failed:",t)}finally{r.value=!1}},z=async()=>{v.value=!0,i.value=null;try{const t=await re();i.value=t,console.log("Verification completed:",t)}catch(t){i.value={error:t.message},console.error("Verification failed:",t)}finally{v.value=!1}},Y=async()=>{d.value=!0,y.value=null;try{const t=[{sourcedId:"123456789",givenName:"John",familyName:"Doe",specialEducation:"true"},{SSID:"987654321",FirstName:"Jane",LastName:"Smith",IEP:"Yes"},{ssid:"555666777",FirstName:"Bob",LastName:"Johnson",iep:"1"},{StateStudentID:"111222333",FirstName:"Alice",LastName:"Brown",504:"true"}],s={aeriesMapping:{},seisMapping:{},ssidExtraction:{},fieldMapping:{}};t.forEach((c,D)=>{const $={};Object.keys(c).forEach(w=>{$[w]=J(w)}),s.aeriesMapping[`row_${D}`]=$}),t.forEach((c,D)=>{const $={};Object.keys(c).forEach(w=>{$[w]=q(w)}),s.seisMapping[`row_${D}`]=$}),t.forEach((c,D)=>{var w;const $=(w=c.sourcedId||c.SSID||c.ssid||c.StateStudentID||c.stateStudentId)==null?void 0:w.trim();s.ssidExtraction[`row_${D}`]={original:c,extractedSSID:$,success:!!$}});const k=["specialEducation","iep","IEP","plan504","504","disabilities","accommodations"];s.fieldMapping={aeries:k.map(c=>({field:c,mapped:J(c)})),seis:k.map(c=>({field:c,mapped:q(c)}))},y.value={success:!0,message:"SSID resolution test completed successfully",results:s},console.log("SSID resolution test completed:",s)}catch(t){y.value={success:!1,error:t.message,message:"SSID resolution test failed"},console.error("SSID resolution test failed:",t)}finally{d.value=!1}},K=()=>{y.value=null},U=async()=>{g.value=!0,b.value=null;try{console.log("Starting period label migration preview...");const t=await le();t.error?b.value=`Preview failed: ${t.error}`:t.changesNeeded?b.value=`Preview completed: ${t.studentsNeedingMigration.length} students need migration (see console for details)`:b.value="No migration needed - all students already use numeric period keys"}catch(t){console.error("Period migration preview failed:",t),b.value=`Preview error: ${t.message}`}finally{g.value=!1}},G=async()=>{if(confirm("This will update period keys from labels to numbers for all students. Continue?")){g.value=!0,b.value=null;try{console.log("Starting period label migration...");const t=await ae();t.success?(b.value=`Migration completed: ${t.migratedStudents}/${t.totalStudents} students updated`,t.errors.length>0&&(b.value+=` (${t.errors.length} errors - see console)`)):b.value=`Migration failed: ${t.error}`}catch(t){console.error("Period migration failed:",t),b.value=`Migration error: ${t.message}`}finally{g.value=!1}}};return(t,s)=>{var k,c,D,$,w,x;return I(),N("div",de,[s[20]||(s[20]=e("h2",null,"App Settings Testing",-1)),e("div",ce,[s[5]||(s[5]=e("h3",null,"App Settings Status",-1)),e("div",ue,[e("div",ge,[s[2]||(s[2]=e("strong",null,"Loading:",-1)),C(" "+a(m(u)?"Yes":"No"),1)]),e("div",pe,[s[3]||(s[3]=e("strong",null,"Error:",-1)),C(" "+a(m(f)||"None"),1)]),e("div",ve,[s[4]||(s[4]=e("strong",null,"Loaded:",-1)),C(" "+a(m(o)&&Object.keys(m(o)).length>0?"Yes":"No"),1)])])]),m(o)?(I(),N("div",fe,[s[10]||(s[10]=e("h3",null,"Current Settings",-1)),e("div",me,[e("div",he,[e("h4",null,"Grades ("+a(((k=m(o).grades)==null?void 0:k.length)||0)+")",1),e("div",Se,a(((c=m(o).grades)==null?void 0:c.join(", "))||"None configured"),1)]),e("div",be,[e("h4",null,"Class Services ("+a(((D=m(o).classServices)==null?void 0:D.length)||0)+")",1),e("div",ye,[(I(!0),N(se,null,te(m(o).classServices,V=>{var B;return I(),N("div",{key:V.name,class:"service-item"},[e("strong",null,a(V.name)+":",1),C(" "+a(((B=V.enabledSubcategories)==null?void 0:B.join(", "))||"None enabled"),1)])}),128))])]),e("div",$e,[e("h4",null,"Service Providers ("+a((($=m(o).serviceProviders)==null?void 0:$.length)||0)+")",1),e("div",we,a(((w=m(o).serviceProviders)==null?void 0:w.join(", "))||"None configured"),1)]),e("div",_e,[s[9]||(s[9]=e("h4",null,"Periods",-1)),e("div",De,[s[6]||(s[6]=e("strong",null,"Number:",-1)),C(" "+a(m(o).numPeriods||0),1),s[7]||(s[7]=e("br",null,null,-1)),s[8]||(s[8]=e("strong",null,"Labels:",-1)),C(" "+a(((x=m(S))==null?void 0:x.join(", "))||"None"),1)])])])])):F("",!0),e("div",Me,[s[11]||(s[11]=e("h3",null,"Test Actions",-1)),e("div",Ne,[e("button",{onClick:h,disabled:m(u),class:"btn btn-primary"},a(m(u)?"Loading...":"Reload Settings"),9,Ie),e("button",{onClick:R,disabled:m(u),class:"btn btn-secondary"}," Reset to Defaults ",8,Te)])]),e("div",Re,[s[13]||(s[13]=e("h3",null,"Component Integration Test",-1)),e("div",Ce,[s[12]||(s[12]=e("p",null,"This section tests if the StudentForm can access app settings:",-1)),e("button",{onClick:s[0]||(s[0]=V=>n.value=!n.value),class:"btn btn-primary"},a(n.value?"Hide":"Show")+" Test Student Form ",1),n.value?(I(),N("div",Pe,[oe(ne,{users:{userRoles:{}},mode:"new",onClose:s[1]||(s[1]=V=>n.value=!1),onSaved:P})])):F("",!0)])]),e("div",Ee,[s[15]||(s[15]=e("h3",null,"Migration Tools",-1)),e("div",ke,[e("button",{onClick:E,disabled:r.value,class:"btn btn-warning"},a(r.value?"Migrating...":"Migrate Student IDs"),9,Ve),e("button",{onClick:z,disabled:v.value,class:"btn btn-secondary"},a(v.value?"Verifying...":"Verify Migration"),9,Fe)]),i.value?(I(),N("div",Le,[s[14]||(s[14]=e("h4",null,"Migration Result:",-1)),e("pre",null,a(JSON.stringify(i.value,null,2)),1)])):F("",!0)]),e("div",je,[s[17]||(s[17]=e("h3",null,"Period Label Migration",-1)),e("div",Ae,[e("button",{onClick:U,disabled:g.value,class:"btn btn-secondary"},a(g.value?"Previewing...":"Preview Period Migration"),9,Oe),e("button",{onClick:G,disabled:g.value,class:"btn btn-warning"},a(g.value?"Migrating...":"Run Period Migration"),9,xe)]),b.value?(I(),N("div",Be,[s[16]||(s[16]=e("h4",null,"Period Migration Result:",-1)),e("p",null,a(b.value),1)])):F("",!0)]),e("div",Je,[s[19]||(s[19]=e("h3",null,"SSID Resolution Test",-1)),e("div",qe,[e("button",{onClick:Y,disabled:d.value,class:"btn btn-primary"},a(d.value?"Testing...":"Test SSID Resolution"),9,ze),e("button",{onClick:K,class:"btn btn-secondary"}," Clear Results ")]),y.value?(I(),N("div",Ye,[s[18]||(s[18]=e("h4",null,"SSID Resolution Test Result:",-1)),e("pre",null,a(JSON.stringify(y.value,null,2)),1)])):F("",!0)])])}}},Ge=X(Ke,[["__scopeId","data-v-6d855ce4"]]);export{Ge as default};
