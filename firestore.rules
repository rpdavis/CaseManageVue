rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ─── HELPER FUNCTIONS ─────────────────────────────────────────────────────
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to safely get user role (handles emulator case where token.role might be undefined)
    function getUserRole() {
      return request.auth.token.get('role', 'admin'); // Default to admin in emulator for development
    }
    
    function isAdmin() {
      return getUserRole() == "admin";
    }
    
    function isSpedChair() {
      return getUserRole() == "sped_chair";
    }
    
    function isAnyAdmin() {
      return getUserRole() in ["admin", "administrator", "administrator_504_CM", "sped_chair"];
    }
    
    function isCaseManager() {
      return getUserRole() == "case_manager";
    }
    
    function isTeacher() {
      return getUserRole() == "teacher";
    }
    
    function isServiceProvider() {
      return getUserRole() == "service_provider";
    }
    
    function isParaeducator() {
      return getUserRole() == "paraeducator";
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasValidRole() {
      return getUserRole() in ["admin", "administrator", "administrator_504_CM", "sped_chair", "case_manager", "teacher", "service_provider", "paraeducator"];
    }
    
    // Enhanced encryption validation for sensitive fields
    function hasValidEncryption(data) {
      // Check if sensitive fields are properly encrypted (strings) or null
      return (
        (data.app.accommodations == null || data.app.accommodations is string) &&
        (data.app.classServices == null || data.app.classServices is string) &&
        (data.app.studentData.plan == null || data.app.studentData.plan is string)
      );
    }
    
    // Enhanced student access control with co-teaching support
    function hasStudentAccess(studentId) {
      let student = get(/databases/$(database)/documents/students/$(studentId)).data;
      
      // Admin roles have full access
      if (isAdmin() || isSpedChair()) {
        return true;
      }
      
      // Administrator role - view only access to all students
      if (getUserRole() == "administrator") {
        return true;
      }
      
      // Administrator_504_CM role - can only access students on their caseload
      if (getUserRole() == "administrator_504_CM") {
        return student.app.studentData.caseManagerId == request.auth.uid;
      }
      
      // Case manager access - only their assigned students
      if (isCaseManager()) {
        return student.app.studentData.caseManagerId == request.auth.uid;
      }
      
      // Teacher access - students in their schedule (both simple and co-teaching formats)
      if (isTeacher()) {
        // Check simple string format: "period": "teacherId"
        if (request.auth.uid in student.app.schedule.periods.values()) {
          return true;
        }
        
        // Check complex co-teaching format: "period": {"teacherId": "id", "coTeaching": {...}}
        let hasTeacherAccess = false;
        let hasCoteachingAccess = false;
        
        // Check if user is primary teacher in any period
        hasTeacherAccess = student.app.schedule.periods.values().hasAny([{'teacherId': request.auth.uid}]);
        
        // Check if user is co-teacher in any period
        hasCoteachingAccess = student.app.schedule.periods.values().hasAny([{'coTeaching': {'caseManagerId': request.auth.uid}}]);
        
        return hasTeacherAccess || hasCoteachingAccess;
      }
      
      // Service provider access - students they provide services to
      if (isServiceProvider()) {
        return (
          request.auth.uid in student.app.providers.values() ||
          request.auth.uid in student.app.schedule.periods.values() ||
          student.app.schedule.periods.values().hasAny([{'teacherId': request.auth.uid}]) ||
          student.app.schedule.periods.values().hasAny([{'coTeaching': {'caseManagerId': request.auth.uid}}])
        );
      }
      
      // Paraeducator access - check aide assignments
      if (isParaeducator()) {
        // This would need to be implemented with aide assignment logic
        return false;
      }
      
      return false;
    }
    
    // Enhanced student edit permissions
    function canEditStudent(studentId) {
      let student = get(/databases/$(database)/documents/students/$(studentId)).data;
      
      // Admin and Sped Chair can edit all students
      if (isAdmin() || isSpedChair()) {
        return true;
      }
      
      // Administrator role - view only (cannot edit)
      if (getUserRole() == "administrator") {
        return false;
      }
      
      // Administrator_504_CM role - can only edit students on their caseload
      if (getUserRole() == "administrator_504_CM") {
        return student.app.studentData.caseManagerId == request.auth.uid;
      }
      
      // Case manager can edit only their assigned students
      if (isCaseManager()) {
        return student.app.studentData.caseManagerId == request.auth.uid;
      }
      
      // Teachers and service providers cannot edit student records
      return false;
    }
    
    // ─── COLLECTIONS ──────────────────────────────────────────────────────────
    
    // Students collection - Enhanced security with role-based access
    match /students/{studentId} {
      allow read: if isAuthenticated() && hasValidRole() && hasStudentAccess(studentId);
      allow create: if isAuthenticated() && (isAdmin() || isSpedChair()) && hasValidEncryption(request.resource.data);
      allow update: if isAuthenticated() && hasValidRole() && canEditStudent(studentId) && hasValidEncryption(request.resource.data);
      allow delete: if isAuthenticated() && (isAdmin() || isSpedChair());
    }
    
    // Users collection - Admin only for management
    match /users/{userId} {
      allow read: if isAuthenticated() && (isAnyAdmin() || isOwner(userId));
      allow create: if isAuthenticated() && isAnyAdmin();
      allow update: if isAuthenticated() && (isAnyAdmin() || isOwner(userId));
      allow delete: if isAuthenticated() && isAnyAdmin();
    }
    
    // App settings - Admin only
    match /app_settings/{document} {
      allow read: if isAuthenticated() && hasValidRole();
      allow write: if isAuthenticated() && isAnyAdmin();
    }
    
    // Aide schedules - Admin and paraeducator access
    match /aideSchedules/{aideId} {
      allow read: if isAuthenticated() && (isAnyAdmin() || isOwner(aideId));
      allow write: if isAuthenticated() && isAnyAdmin();
    }
    
    // Feedback forms - Teacher and admin access
    match /feedbackForms/{formId} {
      allow read: if isAuthenticated() && hasValidRole();
      allow create: if isAuthenticated() && (isTeacher() || isAnyAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAnyAdmin());
      allow delete: if isAuthenticated() && isAnyAdmin();
    }
    
    // Feedback responses - Read-only for authorized users
    match /feedbackResponses/{responseId} {
      allow read: if isAuthenticated() && hasValidRole();
      allow write: if false; // Only functions can write responses
    }
    
    // Feedback send log - Admin and teacher access
    match /feedbackSendLog/{logId} {
      allow read: if isAuthenticated() && (isAnyAdmin() || isTeacher());
      allow write: if false; // Only functions can write logs
    }
    
    // Testing collection - Support both flag2 and separateSetting
    match /testing/{testId} {
      allow read: if isAuthenticated() && hasValidRole();
      allow write: if isAuthenticated() && isAnyAdmin();
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
