rules_version = '2';

// ╔═══════════════════════════════════════════════════════════════════════════╗
// ║                          SIMPLIFIED FIRESTORE RULES                       ║
// ║ Basic authentication and data validation only.                           ║
// ║ Permissions are now handled client-side via role-based views.            ║
// ║                                                                           ║
// ║ SECURITY APPROACH:                                                        ║
// ║ 1. Basic auth check: User must be authenticated                          ║
// ║ 2. Data validation: Ensure proper data structure                         ║
// ║ 3. Client-side filtering: Role-based access via composables             ║
// ║                                                                           ║
// ║ See Documentation/SECURITY_DATABASE_FILTERING.md for details             ║
// ╚═══════════════════════════════════════════════════════════════════════════╝

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ─── BASIC AUTH HELPERS ──────────────────────────────────────────────────
    function isAuth() { 
      return request.auth != null; 
    }
    
    function uid() { 
      return request.auth.uid; 
    }
    
    function isOwner(userId) {
      return uid() == userId;
    }
    
    // ─── DATA VALIDATION ──────────────────────────────────────────────────────
    // Validate data structure matches expected format
    function validEncryptedFields() {
      let d = request.resource.data.app;
      return (d.accommodations == null || 
              (d.accommodations is map &&
               (d.accommodations.instruction == null || d.accommodations.instruction is string) &&
               (d.accommodations.assessment == null || d.accommodations.assessment is string))) &&
             (d.schedule == null || 
              (d.schedule.classServices == null || d.schedule.classServices is list)) &&
             (d.studentData == null || 
              (d.studentData.plan == null || d.studentData.plan is string));
    }
    
    // ─── COLLECTIONS ──────────────────────────────────────────────────────────
    
    // Students collection - Basic auth + data validation only
    match /students/{studentId} {
      allow read: if isAuth();
      allow create: if isAuth() && validEncryptedFields();
      allow update: if isAuth() && validEncryptedFields();
      allow delete: if isAuth();
    }
    
    // Users collection - Basic auth only
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isAuth();
      allow update: if isAuth() || isOwner(userId);
      allow delete: if isAuth();
    }
    
    // App settings - Basic auth only
    match /app_settings/{document} {
      allow read: if isAuth();
      allow write: if isAuth();
    }
    
    // Aide schedules - Basic auth only
    match /aideSchedules/{aideId} {
      allow read: if isAuth();
      allow write: if isAuth();
    }
    
    // Backups collection - Basic auth only
    match /backups/{backupId} {
      allow read: if isAuth();
      allow create, update: if isAuth();
      allow delete: if isAuth();
    }
    
    // Feedback forms - Basic auth only
    match /feedbackForms/{formId} {
      allow read: if isAuth();
      allow create, update: if isAuth();
      allow delete: if isAuth();
    }
    
    // Feedback responses - Read-only, write via Cloud Functions
    match /feedbackResponses/{responseId} {
      allow read: if isAuth();
      allow write: if false; // Only Cloud Functions
    }
    
    // Feedback send log - Read-only, write via Cloud Functions
    match /feedbackSendLog/{logId} {
      allow read: if isAuth();
      allow write: if false; // Only Cloud Functions
    }
    
    // Feedback documents - Basic auth only
    match /feedbackDocuments/{documentId} {
      allow read: if isAuth();
      allow create: if isAuth();
      allow update: if isAuth();
      allow delete: if isAuth();
    }
    
    // Audit logs - FERPA compliance audit trail
    match /auditLogs/{logId} {
      allow read: if isAuth();
      allow create: if isAuth();
      allow write: if isAuth();
      allow update, delete: if false; // Audit logs are immutable
    }
    
    // IEP Access logs - Legacy, keeping for backward compatibility
    match /iepAccessLogs/{logId} {
      allow read: if isAuth();
      allow create: if isAuth();
      allow update, delete: if false; // Immutable logs
    }
    
    // PDF Access logs - Legacy, keeping for backward compatibility  
    match /pdfAccessLogs/{logId} {
      allow read: if isAuth();
      allow create: if isAuth();
      allow update, delete: if false; // Immutable logs
    }
    
    // PDF Metadata - For secure PDF system
    match /pdfMetadata/{fileId} {
      allow read: if isAuth();
      allow create: if isAuth();
      allow update: if isAuth();
      allow delete: if isAuth();
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
